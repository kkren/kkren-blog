<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[本博客的Nginx优化编译方案]]></title>
    <url>%2F2018%2F10%2Fnginx-configuration%2F</url>
    <content type="text"><![CDATA[最近从 Phantom网络加速白嫖了一台贵州的机器。因为没有备案，所以只能请大家用 https 访问了。在编译的过程中，参考了 imququ 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。 编译 Nginx我服务器的环境是 debian 9，在编译前先安装依赖。 1sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev unzip git 然后下载并解压 Nginx 和其他模块 123456789101112# Nginxwget -c http://nginx.org/download/nginx-1.15.6.tar.gztar zxf nginx-1.15.6.tar.gz# OpenSSLwget -c https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gztar xzf OpenSSL_1_1_1.tar.gzmv openssl-OpenSSL_1_1_1 openssl# ngx_brotligit clone https://github.com/google/ngx_brotli.gitcd ngx_brotligit submodule update --initcd ../ 开始编译 1234cd nginx-1.15.6./configure --add-module=../ngx_brotli --with-openssl=../openssl --with-openssl-opt='enable-tls1_3' --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_modulemakesudo make install 如果需要升级 Nginx ，不要执行 sudo make install ，执行下面的命令。 123456cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old# 备份 Nginxcp -f objs/nginx /usr/local/nginx/sbin/nginxnginx -t# 解决上一条命令出现的问题后继续make upgrade 配置 Nginx安装后 Nginx 和配置在 /usr/local/nginx/ 下面。首先打开 conf/nginx.conf 123sendfile on;tcp_nopush on;tcp_nodelay on; 这三行，原来注释掉的改成 on 。 12345678910111213gzip on;gzip_vary on;gzip_comp_level 6;gzip_buffers 16 8k;gzip_min_length 1000;gzip_proxied any;gzip_disable "msie6";gzip_http_version 1.0;gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml; brotli on;brotli_comp_level 6;brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml; 启用 gzip 和 brotli 压缩。然后创建一个网站的配置。 12345ssl_protocols TLSv1.3 TLSv1.2;ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";add_header X-Frame-Options deny;add_header X-Content-Type-Options nosniff; 重点就是加密算法的选择和 HSTS 。 其他的优化博客的所有文件都会用 service worker 永久缓存在读者的电脑上。直接安装 hexo-service-worker 插件即可。 博客的图片放在 sm.ms 图床上，然后使用 hexo-lazyload 制作加载时的缩略图。放上一张首次加载首页的耗时图。]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用transmission在linux上搭建pt下载环境]]></title>
    <url>%2F2018%2F05%2Ftransmission-in-linux%2F</url>
    <content type="text"><![CDATA[现在在linux服务器上部署的pt下载器主要是aria2， transmission和rtorrent，然而aria2要下载pt的话还需要伪装客户端，rtorrent的webui太丑加载速度还很慢，于是最后选择了transmission。博客中提到的服务器的配置为Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。 安装transmission与deamon服务器的系统环境是debian9，所以可以很方便用包管理器安装需要的软件 12apt -y install transmission transmission-deamonsystemctl enable transmission-deamon 好像没有什么特别的配置要配置的，反正webui里都可以改 安装修改版的transmission webui项目地址，安装过程也是全自动的 12wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.shbash install-tr-control.sh 接下来输入1然后按回车就可以了然后重启下transmission 1systemctl restart transmission-deamon 安装 transmission-rss使用nginx 反代webuitransmission的webui没有ssl也没法加密码，所以用nginx反代下，性能更高。我安装的nginx是来自烧饼博客上的教程，下面是配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657server {listen 80 default_server;listen [::]:80 default_server;server_name example.com;location /.well-known/acme-challenge {root /var/www/letsencrypt;}location / {return 301 https://$host$request_uri;}}server {listen 443 ssl http2 default_server;listen [::]:443 ssl http2 default_server;server_name example.com;client_max_body_size 10m;server_tokens off;root /var/www/rutorrent;index index.html index.htm index.php;ssl_dhparam /etc/nginx/ssl/dhparam.pem;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:50m;ssl_session_timeout 1d;ssl_certificate /etc/nginx/ssl/fullchain.cer;ssl_certificate_key /etc/nginx/ssl/dl.key;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";add_header X-Frame-Options SAMEORIGIN;add_header X-Content-Type-Options nosniff;add_header X-XSS-Protection "1; mode=block";location / {auth_basic "Restricted";auth_basic_user_file /etc/nginx/passwd;proxy_pass http://127.0.0.1:9091;}location ~ \.php$ {fastcgi_pass unix:/run/php/php7.2-fpm.sock;include snippets/fastcgi-php.conf;}access_log /var/log/nginx/rutorrent.access.log;error_log /var/log/nginx/rutorrent.error.log;} 其中，/etc/nginx/passwd的生成方法是printf "user:$(openssl passwd -crypt password)\n" >> /etc/nginx/passwd。 最后的效果 真香]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的bug都会放在这里 2018年5月13日]]></content>
  </entry>
</search>
