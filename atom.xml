<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kkren&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kkren.me/"/>
  <updated>2018-11-11T07:25:22.020Z</updated>
  <id>https://kkren.me/</id>
  
  <author>
    <name>kkren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本博客的 Nginx 优化编译方案</title>
    <link href="https://kkren.me/2018/10/nginx-configuration/"/>
    <id>https://kkren.me/2018/10/nginx-configuration/</id>
    <published>2018-10-25T11:02:52.000Z</published>
    <updated>2018-11-11T07:25:22.020Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>最近从 <a href="https://ssrfq.com/" target="_blank" rel="noopener">Phantom 网络加速</a> 白嫖了一台贵州的机器。因为没有备案，所以只能请大家用 https 访问了。在编译的过程中，参考了 <a href="https://imququ.com/post/enable-tls-1-3.html" target="_blank" rel="noopener">imququ</a> 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。<a id="more"></a></p><h2 id="编译-Nginx"><a href="#编译-Nginx" class="headerlink" title="编译 Nginx"></a>编译 Nginx</h2><p>我服务器的环境是  debian 9，在编译前先安装依赖。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev unzip git</span><br></pre></td></tr></tbody></table></figure><p>然后下载并解压 Nginx 和其他模块</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx</span></span><br><span class="line">wget -c http://nginx.org/download/nginx-1.15.6.tar.gz</span><br><span class="line">tar zxf nginx-1.15.6.tar.gz</span><br><span class="line"><span class="comment"># OpenSSL</span></span><br><span class="line">wget -c  https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gz</span><br><span class="line">tar xzf OpenSSL_1_1_1.tar.gz</span><br><span class="line">mv openssl-OpenSSL_1_1_1 openssl</span><br><span class="line"><span class="comment"># ngx_brotli</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/google/ngx_brotli.git</span><br><span class="line"><span class="built_in">cd</span> ngx_brotli</span><br><span class="line">git submodule update --init</span><br><span class="line"><span class="built_in">cd</span> ../</span><br></pre></td></tr></tbody></table></figure><p>开始编译</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.15.6</span><br><span class="line">./configure --add-module=../ngx_brotli --with-openssl=../openssl --with-openssl-opt='enable-tls1_3' --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></tbody></table></figure><p>如果需要升级 Nginx ，不要执行 <code>sudo make install</code> ，执行下面的命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份 Nginx</span></span><br><span class="line">cp -f objs/nginx /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决上一条命令出现的问题后继续 </span></span><br><span class="line">make upgrade</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>安装后 Nginx 和配置在 <code>/usr/local/nginx/</code> 下面。首先打开 <code>conf/nginx.conf</code></p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span>     <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nodelay</span>    <span class="literal">on</span>;</span><br></pre></td></tr></tbody></table></figure><p>这三行，原来注释掉的改成 on 。</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span><span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_vary</span>     <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span><span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span>   <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span><span class="number">1000</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span>   any;</span><br><span class="line"><span class="attribute">gzip_disable</span>   <span class="string">"msie6"</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span><span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line"><span class="attribute">gzip_types</span>    text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">brotli</span><span class="literal">on</span>;</span><br><span class="line"><span class="attribute">brotli_comp_level</span><span class="number">6</span>;</span><br><span class="line"><span class="attribute">brotli_types</span>text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br></pre></td></tr></tbody></table></figure><p>启用 gzip 和 brotli 压缩。然后创建一个网站的配置。</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_protocols</span>TLSv1.<span class="number">3</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span>TLS13-AES-<span class="number">256</span>-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="number">128</span>-GCM-SHA256:TLS13-AES-<span class="number">128</span>-CCM-<span class="number">8</span>-SHA256:TLS13-AES-<span class="number">128</span>-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH;</span><br><span class="line"><span class="attribute">add_header</span>Strict-Transport-Security <span class="string">"max-age=63072000; includeSubDomains; preload"</span>;</span><br><span class="line"><span class="attribute">add_header</span>X-Frame-Options deny;</span><br><span class="line"><span class="attribute">add_header</span>X-Content-Type-Options nosniff;</span><br></pre></td></tr></tbody></table></figure><p>重点就是加密算法的选择和 HSTS 。</p><h2 id="其他的优化"><a href="#其他的优化" class="headerlink" title="其他的优化"></a>其他的优化</h2><p>博客的所有文件都会用 service worker 永久缓存在读者的电脑上。直接安装 <a href="https://github.com/zoumiaojiang/hexo-service-worker" target="_blank" rel="noopener">hexo-service-worker</a> 插件即可。</p><p>博客的图片放在 <a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms</a> 图床上，然后使用 <a href="https://github.com/Robin-front/hexo-lazyload" target="_blank" rel="noopener">hexo-lazyload</a> 制作加载时的缩略图。放上一张首次加载首页的耗时图。<div class="progress-images" style="width:1920px"><div class="progress-images--placeholder" style="padding-bottom: 48.697916666666664%;"></div><img src="/js/lazyload-plugin/loading.svg" alt="加载图" class="progress-images--original" data-original="https://i.loli.net/2018/11/11/5be7d80a4ef45.png" data-thumb="\images\thumb\0b42e047d777bbda7a83271fc227fc82.png"></div></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近从 &lt;a href=&quot;https://ssrfq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Phantom 网络加速&lt;/a&gt; 白嫖了一台贵州的机器。因为没有备案，所以只能请大家用 https 访问了。在编译的过程中，参考了 &lt;a href=&quot;https://imququ.com/post/enable-tls-1-3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;imququ&lt;/a&gt; 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 transmission 在 linux 上搭建 pt 下载环境</title>
    <link href="https://kkren.me/2018/05/transmission-in-linux/"/>
    <id>https://kkren.me/2018/05/transmission-in-linux/</id>
    <published>2018-05-26T12:43:10.000Z</published>
    <updated>2018-10-22T11:40:39.439Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>现在在 linux 服务器上部署的 pt 下载器主要是 aria2， transmission 和 rtorrent，然而 aria2 要下载 pt 的话还需要伪装客户端，rtorrent 的 webui 太丑加载速度还很慢，于是最后选择了 transmission。博客中提到的服务器的配置为 Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。<a id="more"></a></p><h2 id="安装-transmission-与-deamon"><a href="#安装-transmission-与-deamon" class="headerlink" title="安装 transmission 与 deamon"></a>安装 transmission 与 deamon</h2><p>服务器的系统环境是 debian9，所以可以很方便用包管理器安装需要的软件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt -y install transmission transmission-deamon</span><br><span class="line">systemctl enable transmission-deamon</span><br></pre></td></tr></tbody></table></figure><p>好像没有什么特别的配置要配置的，反正 webui 里都可以改</p><h2 id="安装修改版的-transmission-webui"><a href="#安装修改版的-transmission-webui" class="headerlink" title="安装修改版的 transmission webui"></a>安装修改版的 transmission webui</h2><p><a href="https://github.com/ronggang/transmission-web-control" target="_blank" rel="noopener">项目地址</a>，安装过程也是全自动的</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.sh</span><br><span class="line">bash install-tr-control.sh</span><br></pre></td></tr></tbody></table></figure><p>接下来输入 1 然后按回车就可以了 <br> 然后重启下 transmission</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart transmission-deamon</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-transmission-rss"><a href="#安装-transmission-rss" class="headerlink" title="安装 transmission-rss"></a>安装 transmission-rss</h2><h2 id="使用-nginx-反代-webui"><a href="#使用-nginx-反代-webui" class="headerlink" title="使用 nginx 反代 webui"></a>使用 nginx 反代 webui</h2><p>transmission 的 webui 没有 ssl 也没法加密码，所以用 nginx 反代下，性能更高。我安装的 nginx 是来自 <a href="https://sb.sb/blog/debian-install-nginx-php-mysql/" target="_blank" rel="noopener">烧饼博客上的教程</a>，下面是配置文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">listen 80 default_server;</span><br><span class="line">listen [::]:80 default_server;</span><br><span class="line">server_name example.com;</span><br><span class="line"></span><br><span class="line">location /.well-known/acme-challenge {</span><br><span class="line">root /var/www/letsencrypt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">location / {</span><br><span class="line">return 301 https://$host$request_uri;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">listen 443 ssl http2 default_server;</span><br><span class="line">listen [::]:443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">server_name example.com;</span><br><span class="line">client_max_body_size 10m;</span><br><span class="line">server_tokens off;</span><br><span class="line"></span><br><span class="line">root /var/www/rutorrent;</span><br><span class="line">index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">ssl_dhparam /etc/nginx/ssl/dhparam.pem;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">ssl_session_cache shared:SSL:50m;</span><br><span class="line">ssl_session_timeout 1d;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/dl.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";</span><br><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br><span class="line">add_header X-XSS-Protection "1; mode=block";</span><br><span class="line"></span><br><span class="line">location / {</span><br><span class="line">auth_basic "Restricted";</span><br><span class="line">auth_basic_user_file /etc/nginx/passwd;</span><br><span class="line">proxy_pass  http://127.0.0.1:9091;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">location ~ \.php$ {</span><br><span class="line">fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">include snippets/fastcgi-php.conf;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/rutorrent.access.log;</span><br><span class="line">error_log /var/log/nginx/rutorrent.error.log;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>其中，<code>/etc/nginx/passwd</code> 的生成方法是 <code>printf "user:$(openssl passwd -crypt password)\n" >> /etc/nginx/passwd</code>。</p><h2 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h2><p><div class="progress-images" style="width:1920px"><div class="progress-images--placeholder" style="padding-bottom: 49.166666666666664%;"></div><img src="/js/lazyload-plugin/loading.svg" alt="1540133454051" class="progress-images--original" data-original="https://i.loli.net/2018/10/22/5bcda5ea4387b.jpg" data-thumb="\images\thumb\f09c22d45ad98d622ef5ad628307c401.jpg"></div></p><p>真香</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在在 linux 服务器上部署的 pt 下载器主要是 aria2， transmission 和 rtorrent，然而 aria2 要下载 pt 的话还需要伪装客户端，rtorrent 的 webui 太丑加载速度还很慢，于是最后选择了 transmission。博客中提到的服务器的配置为 Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。
    
    </summary>
    
    
      <category term="技术" scheme="https://kkren.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kkren.me/2018/05/hello-world/"/>
    <id>https://kkren.me/2018/05/hello-world/</id>
    <published>2018-05-13T12:18:45.148Z</published>
    <updated>2018-05-26T14:10:12.096Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的 bug 都会放在这里</p><p>2018 年 5 月 13 日</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的 bug 都会放在这里&lt;/p&gt;
&lt;p&gt;2018 年 5 月 13 日&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
